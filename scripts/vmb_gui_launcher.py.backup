#!/usr/bin/env python3
"""
üî• VMB-GUI Integration Launcher
Connects the Visual Model Bootstrap (VMB) system with the VoxSigil GUI
Following BootSigil directive with sigil ‚ü†‚àÜ‚àáìÇÄ

This script:
1. Activates the VMB CopilotSwarm system
2. Integrates VMB agents into the GUI
3. Provides a unified interface for the complete Sigil experience
"""

import asyncio
import logging
import sys
import tkinter as tk
from tkinter import messagebox
from pathlib import Path
from typing import Any, Dict, Optional

import yaml

# Setup enhanced logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler("vmb_gui_launcher.log"), logging.StreamHandler()],
)
logger = logging.getLogger("VMB_GUI_Launcher")

# Add project paths
PROJECT_ROOT = Path(__file__).resolve().parent
sys.path.insert(0, str(PROJECT_ROOT))
sys.path.insert(0, str(PROJECT_ROOT / "GUI" / "components"))
sys.path.insert(0, str(PROJECT_ROOT / "Vanta"))

# Import VMB system
try:
    from .vmb_activation import CopilotSwarm
    from .vmb_production_executor import ProductionTaskExecutor
    VMB_AVAILABLE = True
except ImportError as e:
    logger.error(f"VMB system not available: {e}")
    VMB_AVAILABLE = False
    CopilotSwarm = None
    ProductionTaskExecutor = None

# Import GUI components
try:
    from dynamic_gridformer_gui import DynamicGridFormerGUI

    GUI_AVAILABLE = True
except ImportError as e:
    logger.error(f"GUI not available: {e}")
    GUI_AVAILABLE = False

# Import VantaCore integration
try:
    from voxsigil_supervisor.interfaces.checkin_manager import VantaInteractionManager

    VANTA_AVAILABLE = True
except ImportError as e:
    logger.warning(f"VantaCore not available: {e}")
    VANTA_AVAILABLE = False


class VMBGUIIntegration:
    """Integrates VMB system with VoxSigil GUI for complete experience."""

    def __init__(self):
        self.config = self._load_sigil_trace_config()
        self.vmb_swarm: Optional[CopilotSwarm] = None
        self.production_executor: Optional[ProductionTaskExecutor] = None
        self.vanta_manager: Optional[Any] = None  # VantaInteractionManager if available
        self.gui_app: Optional[Any] = None  # DynamicGridFormerGUI if available
        self.root: Optional[tk.Tk] = None

        logger.info("üöÄ VMB-GUI Integration initialized")
        logger.info(f"üîÆ Sigil: {self.config.get('sigil', 'Unknown')}")
        logger.info(f"ü§ñ Agent Class: {self.config.get('agent_class', 'Unknown')}")
        logger.info(f"‚öîÔ∏è Swarm Variant: {self.config.get('swarm_variant', 'Unknown')}")

    def _load_sigil_trace_config(self) -> Dict[str, Any]:
        """Load configuration from sigil_trace.yaml."""
        config_path = PROJECT_ROOT / "sigil_trace.yaml"
        try:
            with open(config_path, "r") as f:
                config = yaml.safe_load(f)
            logger.info(f"‚úÖ Configuration loaded from {config_path}")
            return config
        except FileNotFoundError:
            logger.warning(f"‚ö†Ô∏è {config_path} not found, using defaults")
            return self._create_default_config()
        except Exception as e:
            logger.error(f"‚ùå Error loading config: {e}")
            return self._create_default_config()

    def _create_default_config(self) -> Dict[str, Any]:
        """Create default BootSigil configuration."""
        return {
            "sigil": "‚ü†‚àÜ‚àáìÇÄ",
            "agent_class": "CopilotSwarm",
            "swarm_variant": "RPG_Sentinel",
            "role_scope": ["planner", "validator", "executor", "summarizer"],
            "activation_mode": "VMB_FirstRun",
            "python_version_required": "3.11",
            "package_manager": "uv",
            "formatter": "ruff",
        }

    async def initialize_vmb_system(self):
        """Initialize the complete VMB system."""
        logger.info("üîÑ Initializing VMB System...")

        try:
            # Initialize CopilotSwarm
            self.vmb_swarm = CopilotSwarm(self.config)
            await self.vmb_swarm.initialize_swarm()
            logger.info("‚úÖ VMB CopilotSwarm initialized")            # Initialize Production Executor
            self.production_executor = ProductionTaskExecutor()
            await self.production_executor.initialize()
            logger.info("‚úÖ VMB Production Executor initialized")            # Initialize Completion Reporter (using status report function)
            from .vmb_status import generate_vmb_status_report
            self.completion_reporter = generate_vmb_status_report
            logger.info("‚úÖ VMB Status Reporter initialized")

            # Initialize VantaCore if available
            if VANTA_AVAILABLE:
                self.vanta_manager = VantaInteractionManager()
                logger.info("‚úÖ VantaCore integration initialized")

            logger.info("üéâ VMB System fully initialized!")
            return True

        except Exception as e:
            logger.error(f"‚ùå VMB System initialization failed: {e}")
            return False

    def initialize_gui(self):
        """Initialize the VoxSigil GUI with VMB integration."""
        logger.info("üñ•Ô∏è Initializing GUI...")

        if not GUI_AVAILABLE:
            logger.error("‚ùå GUI components not available")
            return False

        try:
            # Create root window
            self.root = tk.Tk()
            self.root.title(
                f"üß† VoxSigil VMB Interface - {self.config.get('sigil', '‚ü†‚àÜ‚àáìÇÄ')}"
            )
            self.root.geometry("1400x900")
            self.root.configure(bg="#1a1a2e")

            # Initialize main GUI
            self.gui_app = DynamicGridFormerGUI(self.root)

            # Add VMB integration panel
            self._add_vmb_panel()

            logger.info("‚úÖ GUI initialized with VMB integration")
            return True

        except Exception as e:
            logger.error(f"‚ùå GUI initialization failed: {e}")
            return False

    def _add_vmb_panel(self):
        """Add VMB control panel to the GUI."""
        if not self.gui_app:
            return

        # Create VMB frame
        vmb_frame = tk.Frame(self.root, bg="#2a2a4e", relief=tk.RAISED, bd=2)
        vmb_frame.pack(side=tk.TOP, fill=tk.X, padx=5, pady=5)

        # VMB Status Label
        status_text = f"VMB Status: {'üü¢ Active' if self.vmb_swarm and self.vmb_swarm.active else 'üî¥ Inactive'}"
        status_label = tk.Label(
            vmb_frame,
            text=status_text,
            bg="#2a2a4e",
            fg="#00ff88",
            font=("Consolas", 10, "bold"),
        )
        status_label.pack(side=tk.LEFT, padx=10, pady=5)

        # Sigil Display
        sigil_label = tk.Label(
            vmb_frame,
            text=f"Sigil: {self.config.get('sigil', '‚ü†‚àÜ‚àáìÇÄ')}",
            bg="#2a2a4e",
            fg="#ffaa00",
            font=("Consolas", 12, "bold"),
        )
        sigil_label.pack(side=tk.LEFT, padx=10, pady=5)

        # Agent Count
        if self.vmb_swarm:
            agent_count = len(self.vmb_swarm.agents)
            agent_text = f"Agents: {agent_count}/4"
        else:
            agent_text = "Agents: 0/4"

        agent_label = tk.Label(
            vmb_frame,
            text=agent_text,
            bg="#2a2a4e",
            fg="#88aaff",
            font=("Consolas", 10),
        )
        agent_label.pack(side=tk.LEFT, padx=10, pady=5)

        # VMB Control Buttons
        btn_frame = tk.Frame(vmb_frame, bg="#2a2a4e")
        btn_frame.pack(side=tk.RIGHT, padx=10, pady=5)

        # Execute Task Button
        execute_btn = tk.Button(
            btn_frame,
            text="üöÄ Execute VMB Task",
            command=self._on_execute_vmb_task,
            bg="#ff6b35",
            fg="white",
            font=("Consolas", 9, "bold"),
            relief=tk.RAISED,
            bd=1,
        )
        execute_btn.pack(side=tk.LEFT, padx=5)

        # Generate Report Button
        report_btn = tk.Button(
            btn_frame,
            text="üìä Generate Report",
            command=self._on_generate_report,
            bg="#4ecdc4",
            fg="white",
            font=("Consolas", 9, "bold"),
            relief=tk.RAISED,
            bd=1,
        )
        report_btn.pack(side=tk.LEFT, padx=5)

        # VantaCore Toggle
        if VANTA_AVAILABLE:
            vanta_btn = tk.Button(
                btn_frame,
                text="üîó VantaCore",
                command=self._on_toggle_vanta,
                bg="#9b59b6",
                fg="white",
                font=("Consolas", 9, "bold"),
                relief=tk.RAISED,
                bd=1,
            )
            vanta_btn.pack(side=tk.LEFT, padx=5)

    def _on_execute_vmb_task(self):        """Handle VMB task execution."""
        if not self.production_executor:
            messagebox.showwarning(
                "Warning", "VMB Production Executor not initialized"
            )
            return

        # Run async task in background
        asyncio.create_task(self._async_execute_vmb_task())

    async def _async_execute_vmb_task(self):
        """Async VMB task execution."""
        try:
            logger.info("üöÄ Executing VMB production task...")
            # Create a sample task for demonstration
            sample_task = {"name": "VMB System Test", "type": "diagnostic"}
            result = await self.production_executor.execute_production_task(sample_task)

            if result.get("status") == "success":
                messagebox.showinfo("Success", "VMB task executed successfully!")
                logger.info("‚úÖ VMB task completed successfully")
            else:
                error_msg = result.get("error", "Unknown error")
                messagebox.showerror("Error", f"VMB task failed: {error_msg}")
                logger.error(f"‚ùå VMB task failed: {error_msg}")

        except Exception as e:
            logger.error(f"‚ùå VMB task execution error: {e}")
            messagebox.showerror("Error", f"Execution error: {e}")

    def _on_generate_report(self):
        """Handle report generation."""
        if not self.completion_reporter:
            tk.messagebox.showwarning(
                "Warning", "VMB Completion Reporter not initialized"
            )
            return

        asyncio.create_task(self._async_generate_report())

    async def _async_generate_report(self):
        """Async report generation."""
        try:
            logger.info("üìä Generating VMB completion report...")
            report = await self.completion_reporter.generate_completion_report()

            # Save report to file
            report_path = PROJECT_ROOT / "VMB_COMPLETION_REPORT.md"
            with open(report_path, "w") as f:
                f.write(report)

            tk.messagebox.showinfo("Success", f"Report generated: {report_path}")
            logger.info(f"‚úÖ Report saved to {report_path}")

        except Exception as e:
            logger.error(f"‚ùå Report generation error: {e}")
            tk.messagebox.showerror("Error", f"Report generation failed: {e}")

    def _on_toggle_vanta(self):
        """Handle VantaCore toggle."""
        if not self.vanta_manager:
            tk.messagebox.showwarning("Warning", "VantaCore not available")
            return

        tk.messagebox.showinfo("VantaCore", "VantaCore integration activated!")
        logger.info("üîó VantaCore integration toggled")

    async def run(self):
        """Main run method - initializes and starts the complete system."""
        logger.info("üåü Starting VMB-GUI Integration...")

        # Initialize VMB system
        vmb_success = await self.initialize_vmb_system()
        if not vmb_success:
            logger.error("‚ùå VMB system initialization failed")
            return False

        # Initialize GUI
        gui_success = self.initialize_gui()
        if not gui_success:
            logger.error("‚ùå GUI initialization failed")
            return False

        logger.info("üéâ VMB-GUI Integration ready!")
        logger.info("üöÄ Starting GUI main loop...")

        # Start GUI main loop
        if self.root:
            self.root.mainloop()

        return True


async def main():
    """Main entry point."""
    logger.info("=" * 80)
    logger.info("üî• VMB-GUI INTEGRATION LAUNCHER")
    logger.info("üîÆ Sigil: ‚ü†‚àÜ‚àáìÇÄ")
    logger.info("ü§ñ Following BootSigil Directive v1.6")
    logger.info("=" * 80)

    # Create and run integration
    integration = VMBGUIIntegration()
    success = await integration.run()

    if success:
        logger.info("‚úÖ VMB-GUI Integration completed successfully")
    else:
        logger.error("‚ùå VMB-GUI Integration failed")
        sys.exit(1)


if __name__ == "__main__":
    # Run the async main function
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë VMB-GUI Integration stopped by user")
    except Exception as e:
        logger.error(f"‚ùå Critical error: {e}")
        sys.exit(1)
